plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "com.modrinth.minotaur"
    apply plugin: "com.matthewprenger.cursegradle"

    version = "${rootProject.mod_version}+${rootProject.minecraft_version}-${name}"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }

    Map<String, Map<String, String>> platformSettings = [
            "fabric": [
                    "curse-id": "363949",
                    "modrinth-id": "eA8SXqWL"
            ],
            "quilt": [
                    "curse-id": "363949",
                    "modrinth-id": "eA8SXqWL"
            ],
            "forge": [
                    "curse-id": "362479",
                    "modrinth-id": "38tpSycf"
            ]
    ]

    Map<String, Map<String, Boolean>> platformDependencies = [
            "fabric": [
                    "fabric-api": true,
                    "midnightlib": true,
                    "unofficial-sodium-biome-blending-fix": false
            ],
            "quilt": [
                    "qsl": true,
                    "midnightlib": true,
                    "unofficial-sodium-biome-blending-fix": false
            ],
            "forge": []
    ]

    var env = System.getenv()
    def uploadSettings = platformSettings.get(name)
    def uploadDependencies = platformDependencies.get(name)

    if (uploadSettings != null && uploadDependencies != null) {

        File changeLog = rootProject.file("CHANGELOG.md")
        String changeLogText = changeLog.exists() ? changeLog.text : ""

        if (env.MODRINTH) {
            modrinth {
                token = env.MODRINTH
                versionName = "The Bumblezone"
                versionNumber = "${project.version}"
                changelog = changeLogText
                projectId = uploadSettings["modrinth-id"]

                gameVersions = ["${rootProject.minecraft_version}"]
                loaders = [name]

                uploadFile = tasks.remapJar

                dependencies {
                    def optionalContainer = getOptional()
                    def requiredContainer = getRequired()
                    uploadDependencies.each { dep, required ->
                        if (required) {
                            requiredContainer.project(dep)
                        } else {
                            optionalContainer.project(dep)
                        }
                    }
                }
            }
        }

        if (env.CURSEFORGEKEY) {
            curseforge {
                apiKey = env.CURSEFORGEKEY
                project { proj ->
                    id = uploadSettings["curse-id"]
                    changelog = changeLogText
                    releaseType = "release"

                    addGameVersion("${rootProject.minecraft_version}")
                    addGameVersion(name.capitalize())

                    mainArtifact(tasks.remapJar) {
                        displayName = "The Bumblezone v${rootProject.mod_version} (${rootProject.minecraft_version} MC ${name.capitalize()})"
                    }

                    if (uploadDependencies.size() > 0) {
                        relations {
                            uploadDependencies.each { dep, required ->
                                if (required) {
                                    requiredDependency(dep)
                                }
                                else {
                                    optionalDependency(dep)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact remapJar
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }

                artifactId = "$rootProject.name"

                pom {
                    name = 'TheBumblezone'
                    description = 'An unBEElievable dimension full of bees that becomes REALLY angry if you take their honey!'
                    url = 'https://github.com/TelepathicGrunt/Bumblezone'

                    scm {
                        connection = 'git:https://github.com/TelepathicGrunt/Bumblezone.git'
                        developerConnection = 'git:https://github.com/TelepathicGrunt/Bumblezone.git'
                        url = 'https://github.com/TelepathicGrunt/Bumblezone'
                    }

                    licenses {
                        license {
                            name = 'GNU Lesser General Public License v3.0'
                            url = 'https://github.com/TelepathicGrunt/Bumblezone/LICENSE'
                        }
                    }

                    developers {
                        developer {
                            id = 'telepathic_grunt'
                            name = 'TelepathicGrunt'
                            email = 'asarnesespam@gmail.com'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url = "https://maven.resourcefulbees.com/repository/telepathicgrunt/"
                credentials {
                    username ENV.MAVEN_USER
                    password ENV.MAVEN_PASS
                }
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = "${rootProject.mod_version}+${rootProject.minecraft_version}-${name}"
    group = rootProject.maven_group

    repositories {
        maven {
            url = 'https://maven.cafeteria.dev/releases'
            content {
                includeGroup 'dev.cafeteria'
            }
        }
        maven { url "https://nexus.resourcefulbees.com/repository/maven-public/" }
        maven { url "https://maven.architectury.dev/" }
        maven { url "https://maven.shedaniel.me" }
        maven {
            name = 'Ladysnake Mods'
            url = 'https://ladysnake.jfrog.io/artifactory/mods'
            content {
                includeGroup 'io.github.ladysnake'
                includeGroupByRegex '(dev|io\\.github)\\.onyxstudios.*'
                includeGroupByRegex 'dev\\.emi.*'
            }
        }
        maven {
            url = 'https://maven.jamieswhiteshirt.com/libs-release/'
            content {
                includeGroup 'com.jamieswhiteshirt'
            }
        }
        maven { url "https://jitpack.io" }
        maven { url "https://www.cursemaven.com" }
        maven { url "https://api.modrinth.com/maven/" }
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}