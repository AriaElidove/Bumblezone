plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modCompileOnly("curse.maven:lootr_fabric-615106:${project.lootr_fabric_file_id}")
    //modRuntimeOnly("curse.maven:lootr_fabric-615106:${project.lootr_fabric_file_id}")

    modImplementation("maven.modrinth:midnightlib:${rootProject.midnightlib}")

    modCompileOnly("maven.modrinth:modmenu:${rootProject.mod_menu}")
    modRuntimeOnly("maven.modrinth:modmenu:${rootProject.mod_menu}")

    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components}")
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components}")
    include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components}")
    include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components}")

    modCompileOnly("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config}")
    //modCompileOnly("com.github.CaffeineMC:sodium-fabric:${rootProject.sodium}")
    //modLocalRuntime("com.github.CaffeineMC:sodium-fabric:${rootProject.sodium}")

    //include("me.luligabi:NoIndium:${rootProject.noindium}")
    //modLocalRuntime("curse.maven:indium-459496:${rootProject.indium_file_id}")

    //modLocalRuntime("dev.emi:emi:${rootProject.emi}")

    modLocalRuntime("com.telepathicgrunt:CommandStructures-Fabric:${project.commandstructures_fabric}")
    modLocalRuntime("com.telepathicgrunt:StructureVoidToggle-Fabric:${project.structurevoidtoggle_fabric}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    common(project(path: ":fabric-base", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":fabric-base", configuration: "transformProductionFabric")) { transitive false }

    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${rootProject.mixin_extras}")))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact remapJar
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            artifactId = "$rootProject.name"

            pom {
                name = 'TheBumblezone'
                description = 'A wonderful bee dimension mod with lots of new exploration and adventuring to do!'
                url = 'https://github.com/TelepathicGrunt/Bumblezone'

                scm {
                    connection = 'git:https://github.com/TelepathicGrunt/Bumblezone.git'
                    developerConnection = 'git:https://github.com/TelepathicGrunt/Bumblezone.git'
                    url = 'https://github.com/TelepathicGrunt/Bumblezone'
                }

                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://github.com/TelepathicGrunt/Bumblezone/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'telepathic_grunt'
                        name = 'TelepathicGrunt'
                        email = 'asarnesespam@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = "https://maven.resourcefulbees.com/repository/telepathicgrunt/"
            credentials {
                username ENV.MAVEN_USER
                password ENV.MAVEN_PASS
            }
        }
    }
}

task buildAndRelease{}
tasks.publish.mustRunAfter tasks.build
tasks.curseforge.mustRunAfter tasks.publish
tasks.modrinth.mustRunAfter tasks.publish
tasks.buildAndRelease.dependsOn(tasks.build, tasks.publish, tasks.curseforge, tasks.modrinth)