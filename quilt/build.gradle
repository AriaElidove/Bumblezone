plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven { url 'https://maven.quiltmc.org/repository/release' }
    maven { url 'https://maven.quiltmc.org/repository/snapshot' }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module('net.fabricmc:fabric-loader') using module("org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}")
        all { DependencySubstitution dependency ->
            if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.group == 'net.fabricmc.fabric-api') {
                if (dependency.requested.module == 'fabric-api')
                    dependency.useTarget "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilt_fabric_api_version}-${rootProject.minecraft_version}"
                else
                    dependency.useTarget 'org.quiltmc.quilted-fabric-api' + ':' + dependency.requested.module + ":5.0.0-alpha.7+0.70.0-1.19.3"
            }
        }
    }
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
    modApi("org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilt_fabric_api_version}-${rootProject.minecraft_version}") {
        force = true
    }

    modImplementation("dev.cafeteria:fake-player-api:${rootProject.fake_player_api}") {
        transitive = false //This API doesnt use fabric but includes it so we need to exclude it as its from 1.19.1
    }
    include "dev.cafeteria:fake-player-api:${rootProject.fake_player_api}"

    modImplementation "maven.modrinth:midnightlib:${rootProject.midnightlib}"

    modCompileOnly "maven.modrinth:modmenu:${rootProject.mod_menu}"
    modRuntimeOnly "maven.modrinth:modmenu:${rootProject.mod_menu}"

    modCompileOnly "dev.emi:emi:${rootProject.emi}"

    modCompileOnly("io.github.ladysnake:requiem-api:${rootProject.requiem}") {
        transitive = false
    }
    modCompileOnly("io.github.ladysnake:requiem-core:${rootProject.requiem}") {
        transitive = false
    }
    modCompileOnly("io.github.ladysnake:requiem:${rootProject.requiem}") {
        transitive = false
    }

    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components}")
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components}")
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
    common(project(path: ":fabric-base", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":fabric-base", configuration: "transformProductionQuilt")) { transitive false }

    include "com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras}"
    modImplementation "com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras}"
    annotationProcessor "com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}